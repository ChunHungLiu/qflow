#!/bin/sh

AC_INIT(VERSION,, eda-dev@opencircuitdesign.com)
AC_PREREQ(2.60)
AC_CONFIG_SRCDIR([Makefile.in])

# Determine the host and build type.
# ===========================================================================
AC_CANONICAL_HOST

PACKAGE=qflow
VERSION=`cat ./VERSION | cut -d. -f1-2`

AC_SUBST(VERSION)
AC_ARG_PROGRAM

# Required programs
# ===========================================================================
AC_PROG_CC
AC_PROG_CPP
AC_ISC_POSIX
if test "x$U" != "x"; then
  AC_MSG_ERROR(Compiler not ANSI compliant)
fi
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_CHECK_PROG(AUTOCONF, autoconf, autoconf, :)
AC_CHECK_PROG(CP, cp, cp, :)
AC_CHECK_PROG(RM, rm, rm, :)

AC_LANG_C
AC_HEADER_STDC
AC_CHECK_FUNCS(setenv putenv)

# Options
# =========================================

dnl Path to Tcl/Tk

AC_ARG_WITH(tclsh,
[  --with-tclsh=DIR		path to tclsh], [
   if test -d "$withval"; then
      TCLSH_DIR=$withval
   elif test -f "$withval"; then
      # Path includes "/tclsh";  remove it
      TCLSH_DIR=${withval%/tclsh}
   else
      TCLSH_DIR=${PATH}
   fi
   AC_CHECK_PROG(TCLSH_PATH, tclsh, tclsh, $TCLSH_DIR)
], [
   AC_CHECK_PROG(TCLSH_PATH, tclsh, tclsh, )])
AC_DEFINE_UNQUOTED(TCLSH_PATH, "$TCLSH_PATH")

dnl Path to Magic 8.0

AC_ARG_WITH(magic,
[  --with-magic=DIR		path to magic-8.0], [
   if test -d "$withval"; then
      QFLOW_MAGIC_DIR=$withval
   elif test -f "$withval"; then
      # Path includes "/magic";  remove it
      QFLOW_MAGIC_DIR=${withval%/magic}
   else
      QFLOW_MAGIC_DIR=${PATH}
   fi
   AC_PATH_PROG(QFLOW_MAGIC_PATH, magic, , $QFLOW_MAGIC_DIR)
], [
   AC_PATH_PROG(QFLOW_MAGIC_PATH, magic, , )])
AC_DEFINE_UNQUOTED(QFLOW_MAGIC_PATH, "$QFLOW_MAGIC_PATH")

dnl Path to Qrouter

AC_ARG_WITH(qrouter,
[  --with-qrouter=DIR		path to qrouter], [
   if test -d "$withval"; then
      QFLOW_QROUTER_DIR=$withval
   elif test -f "$withval"; then
      # Path includes "/qrouter";  remove it
      QFLOW_QROUTER_DIR=${withval%/qrouter}
   else
      QFLOW_QROUTER_DIR=${PATH}
   fi
   AC_PATH_PROG(QFLOW_QROUTER_PATH, qrouter, , $QFLOW_QROUTER_DIR)
], [
   AC_PATH_PROG(QFLOW_QROUTER_PATH, qrouter, , )])
AC_DEFINE_UNQUOTED(QFLOW_QROUTER_PATH, "$QFLOW_QROUTER_PATH")

dnl Path to TimberWolf

AC_ARG_WITH(timberwolf,
[  --with-timberwolf=DIR		path to TimberWolf .twrc file], [
   if test -d "$withval"; then
      QFLOW_TW_DIR=$withval
   elif test -f "$withval"; then
      # Path includes ".twrc";  strip this off
      QFLOW_TW_DIR=${withval%/.twrc}
   else
      QFLOW_TW_DIR=${PATH}
   fi
   AC_PATH_PROG(QFLOW_TWRC_PATH, .twrc, , $QFLOW_TW_DIR)
], [
   AC_PATH_PROG(QFLOW_TWRC_PATH, .twrc, , )])

AC_DEFINE_UNQUOTED(QFLOW_TWRC_PATH, "$QFLOW_TWRC_PATH")
QFLOW_TW_PATH=${ac_cv_path_QFLOW_TWRC_PATH%/.twrc}

dnl Path to Odin-II

AC_ARG_WITH(odin_II,
[  --with-odin_II=DIR		path to odin_II.exe], [
   if test -d "$withval"; then
      QFLOW_ODIN_DIR=$withval
   elif test -f "$withval"; then
      # Path includes odin_II executable;  strip this off
      QFLOW_ODIN_DIR=${withval%/odin_II.exe}
   else
      QFLOW_ODIN_DIR=${PATH}
   fi
   AC_PATH_PROG(QFLOW_ODIN_PATH, odin_II.exe, , $QFLOW_ODIN_DIR)
], [
   AC_PATH_PROG(QFLOW_ODIN_PATH, odin_II.exe, , )])

AC_DEFINE_UNQUOTED(QFLOW_ODIN_PATH, "$QFLOW_ODIN_PATH")

dnl Path to abc

AC_ARG_WITH(abc,
[  --with-abc=DIR		path to ABC executable], [
   if test -d "$withval"; then
      QFLOW_ABC_DIR=$withval
   elif test -f "$withval"; then
      # Path includes "/abc";  remove it
      QFLOW_ABC_DIR=${withval%/abc}
   else
      QFLOW_ABC_DIR=${PATH}
   fi
   AC_PATH_PROG(QFLOW_ABC_PATH, abc, , $QFLOW_ABC_DIR)
], [
   AC_PATH_PROG(QFLOW_ABC_PATH, abc, , )])
AC_DEFINE_UNQUOTED(QFLOW_ABC_PATH, "$QFLOW_ABC_PATH")

AC_ARG_WITH(libdir,
[  --with-libdir=DIR			path to qflow runtime files], [
   if test -d "$withval"; then
      QFLOW_LIB_DIR=$withval
   else
      QFLOW_LIB_DIR=${ac_default_prefix}/share/qflow
   fi
], [
   QFLOW_LIB_DIR=${ac_default_prefix}/share/qflow
])

AC_ARG_WITH(bindir,
[  --with-bindir=DIR			path to qflow launch script], [
   if test -d "$withval"; then
      QFLOW_BIN_DIR=$withval
   else
      QFLOW_BIN_DIR=${ac_default_prefix}/bin
   fi
], [
   QFLOW_BIN_DIR=${ac_default_prefix}/bin
])

AC_ARG_WITH(sourcedir,
[  --with-sourcedir=DIR			default path to verilog source], [
   if test -d "$withval"; then
      QFLOW_SOURCE_DIR=$withval
   else
      QFLOW_SOURCE_DIR=source
   fi
], [
   QFLOW_SOURCE_DIR=source
])

AC_ARG_WITH(synthdir,
[  --with-synthdir=DIR			default path to synthesis files], [
   if test -d "$withval"; then
      QFLOW_SYNTH_DIR=$withval
   else
      QFLOW_SYNTH_DIR=synthesis
   fi
], [
   QFLOW_SYNTH_DIR=synthesis
])

AC_ARG_WITH(layoutdir,
[  --with-layoutdir=DIR			default path to layout files], [
   if test -d "$withval"; then
      QFLOW_LAYOUT_DIR=$withval
   else
      QFLOW_LAYOUT_DIR=synthesis
   fi
], [])

AC_ARG_WITH(techdir,
[  --with-techdir=DIR			default path to tech files], [
   if test -d "$withval"; then
      QFLOW_TECH_DIR=$withval
   else
      QFLOW_TECH_DIR=${QFLOW_LIB_DIR}/tech
   fi
], [
   QFLOW_TECH_DIR=${QFLOW_LIB_DIR}/tech
])

AC_ARG_WITH(techdefault,
[  --with-techdefault=DIR		default technology], [
   QFLOW_TECH=$withval
], [
   QFLOW_TECH=osu035
])

AC_ARG_WITH(projectroot,
[  --with-projectroot=DIR		default project root], [
   if test -d "$withval"; then
      QFLOW_PROJECT_ROOT=$withval
   else
      QFLOW_PROJECT_ROOT=.
   fi
], [
   QFLOW_PROJECT_ROOT=.
])

dnl AC_SUBST(QFLOW_QROUTER_PATH)
dnl AC_SUBST(QFLOW_MAGIC_PATH)
dnl AC_SUBST(QFLOW_TWRC_PATH)
dnl AC_SUBST(QFLOW_ABC_PATH)
dnl AC_SUBST(QFLOW_ODIN_PATH)
AC_SUBST(QFLOW_TW_PATH)

AC_SUBST(QFLOW_BIN_DIR)
AC_SUBST(QFLOW_LIB_DIR)
AC_SUBST(QFLOW_SOURCE_DIR)
AC_SUBST(QFLOW_SYNTH_DIR)
AC_SUBST(QFLOW_LAYOUT_DIR)
AC_SUBST(QFLOW_TECH_DIR)
AC_SUBST(QFLOW_TECH)
AC_SUBST(QFLOW_PROJECT_ROOT)

AC_SUBST(TCLSH_PATH)

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(LD)
AC_SUBST(STDLIBS)

AC_OUTPUT(Makefile scripts/Makefile src/Makefile tech/Makefile tech/osu035/Makefile)

echo ""
echo "Configuration results:"
echo "----------------------------------------------------"
echo ""

if test "x${QFLOW_TW_PATH}" == "x"; then
   echo "ERROR: TimberWolf not found.  Use --with-timberwolf=<DIR>"
else
   echo "Using TimberWolf placement tool at: ${QFLOW_TW_PATH}"
fi

if test "x${ac_cv_path_QFLOW_QROUTER_PATH}" == "x"; then
   echo "ERROR: qrouter not found.  Use --with-qrouter=<DIR>"
else
   echo "Using qrouter detail route tool at: ${ac_cv_path_QFLOW_QROUTER_PATH}"
fi

if test "x${ac_cv_path_QFLOW_ODIN_PATH}" == "x"; then
   echo "ERROR: odin_II not found.  Use --with-odin_II=<DIR>"
else
   echo "Using odin_II verilog parsing tool at: ${ac_cv_path_QFLOW_ODIN_PATH}"
fi

if test "x${ac_cv_path_QFLOW_ABC_PATH}" == "x"; then
   echo "ERROR: ABC not found.  Use --with-abc=<DIR>"
else
   echo "Using ABC logic optimization tool at: ${ac_cv_path_QFLOW_ABC_PATH}"
fi

if test "x${ac_cv_path_QFLOW_MAGIC_PATH}" == "x"; then
   echo "WARNING: Magic 8.0 not found.  Use --with-magic=<DIR>"
else
   echo "Using Magic layout tool at: ${ac_cv_path_QFLOW_MAGIC_PATH}"
fi

echo "----------------------------------------------------"
